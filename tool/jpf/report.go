//Copyright (c) 2013, The Impendulo Authors
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification,
//are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice, this
//  list of conditions and the following disclaimer in the documentation and/or
//  other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
//ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package jpf

import (
	"encoding/gob"
	"encoding/xml"
	"fmt"

	"github.com/godfried/impendulo/tool"
	"github.com/godfried/impendulo/tool/result"
	"github.com/godfried/impendulo/util"
	"labix.org/v2/mgo/bson"

	"strconv"
)

type (
	//Report is the top level structure extracted from the XML generated by JPF.
	//It provides statistics, errors, Threads (the state when an error occurred)
	//and a Trace of how an error came about.
	Report struct {
		Id      bson.ObjectId
		Version string      `xml:"jpf-version"`
		Stats   *Statistics `xml:"statistics"`
		Errors  []*Error    `xml:"errors>error"`
		Total   int         `xml:"errors>total"`
		//The execution trace is recorded here.
		//See gov.nasa.jpf.vm.Path
		Trace []*Transition `xml:"trace>transition"`
	}
	//Statistics is a simple structure which holds captured information
	//relating to JPF's execution.
	//See gov.nasa.jpf.report.Statistics
	Statistics struct {
		Time              int64 `xml:"elapsed-time"`
		NewStates         int   `xml:"new-states"`
		VisitedStates     int   `xml:"visited-states"`
		BacktrackedStates int   `xml:"backtracked-states"`
		EndStates         int   `xml:"end-states"`
		Memory            int   `xml:"max-memory"`
	}

	//Error represents a JPF Error.
	//It contains the property which was violated as well as a more
	//detailed error message.
	//See gov.nasa.jpf.Error
	Error struct {
		Property string    `xml:"property"`
		Details  string    `xml:"details"`
		Threads  []*Thread `xml:"threads>thread"`
	}

	//Thread represents a live thread at the time when an error occurred.
	//See gov.nasa.jpf.vm.ThreadInfo
	Thread struct {
		Id   int    `xml:"id,attr"`
		Name string `xml:"name,attr"`
		//This thread's state: NEW, RUNNING, BLOCKED, UNBLOCKED, WAITING, TIMEOUT_WAITING,
		//NOTIFIED, INTERRUPTED, TIMEDOUT, TERMINATED, SLEEPING
		Status       string   `xml:"status,attr"`
		Frames       []*Frame `xml:"frame"`
		RequestLocks []string `xml:"lock-request object,attr"`
		//Lock objects this thread owns
		OwnedLocks []string `xml:"lock-owned object,attr"`
	}

	//Frame represents a thread's stack frame
	//See gov.nasa.jpf.vm.StackFrame
	Frame struct {
		Id      string `xml:"frameid,attr"`
		Line    int    `xml:"line,attr"`
		Details string `xml:",innerxml"`
	}

	//Transition is used to store an execution path.
	//See gov.nasa.jpf.vm.Transition
	Transition struct {
		Id       int              `xml:"frameid,attr"`
		ThreadId int              `xml:"thread,attr"`
		CG       *ChoiceGenerator `xml:"cg"`
		Insns    []*Instruction   `xml:"insn"`
	}

	//ChoiceGenerator is what is used to explore the state space.
	//Here we can see what choice was made to reach a certain state.
	//See gov.nasa.jpf.vm.ChoiceGenerator
	ChoiceGenerator struct {
		Class  string `xml:"class,attr"`
		Choice string `xml:"choice,attr"`
	}

	//Instruction corresponds to an executed JPF bytecode instruction.
	//See gov.nasa.jpf.vm.Step and gov.nasa.jpf.vm.Instruction
	Instruction struct {
		Source string `xml:"src,attr"`
		Value  string `xml:",innerxml"`
	}
)

func init() {
	//Register with gob so that we can store it in GridFS
	gob.Register(new(Report))
}

//NewReport generates a new Report from the provided XML data.
func NewReport(id bson.ObjectId, data []byte) (r *Report, e error) {
	if e = xml.Unmarshal(data, &r); e != nil {
		e = tool.NewXMLError(e, "jpf/jpfResult.go")
		return
	}
	r.Id = id
	return
}

func (r *Report) Lines() []*result.Line {
	lines := make([]*result.Line, 0, len(r.Errors)*10)
	for i, e := range r.Errors {
		for _, t := range e.Threads {
			for _, f := range t.Frames {
				d := "Error #" + strconv.Itoa(i+1) + ": " + t.Name + ": " + t.Status + " at " + f.Details
				lines = append(lines, &result.Line{Title: util.ShortName(e.Property), Description: d, Start: f.Line, End: f.Line})
			}
		}
	}
	return lines
}

//Errors provided the number of errors found by JPF.
func (r *Report) ErrorCount() int {
	return len(r.Errors)
}

//Success is true if JPF found no errors.
func (r *Report) Success() bool {
	return r.ErrorCount() == 0
}

//String
func (r *Report) String() string {
	return fmt.Sprintf("Id: %q; Version: %s; \nResult: %q;\n Stats: %s",
		r.Id, r.Version, r.Errors, r.Stats)
}

//String
func (t *Transition) String() string {
	return `Transition Id: ` + strconv.Itoa(t.Id) + `; Thread Id: ` + strconv.Itoa(t.ThreadId)
}

//String
func (s *Statistics) String() string {
	return fmt.Sprintf("NewStates: %d; VisitedStates: %d; BacktrackedStates: %d; EndStates: %d;",
		s.NewStates, s.VisitedStates, s.BacktrackedStates, s.EndStates)
}
