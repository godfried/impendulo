//Copyright (c) 2013, The Impendulo Authors
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification,
//are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice, this
//  list of conditions and the following disclaimer in the documentation and/or
//  other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
//ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package jpf

import (
	"encoding/gob"
	"encoding/xml"
	"fmt"
	"github.com/godfried/impendulo/tool"
	"labix.org/v2/mgo/bson"
	"strconv"
)

type (
	//Report is the top level structure extracted from the XML generated by JPF.
	//It provides statistics, findings (successful or not), Threads (the state when an error occurred)
	//and a Trace of how an error came about.
	Report struct {
		Id      bson.ObjectId
		Version string    `xml:"jpf-version"`
		Threads []*Thread `xml:"live-threads>thread"`
		//The execution trace is recorded here.
		//See gov.nasa.jpf.vm.Path
		Trace    []*Transition `xml:"trace>transition"`
		Findings *Findings     `xml:"result"`
		Stats    *Statistics   `xml:"statistics"`
	}

	//Thread represents a live thread at the time when an error occurred.
	//See gov.nasa.jpf.vm.ThreadInfo
	Thread struct {
		//The thread's stack frames
		//See gov.nasa.jpf.vm.StackFrame
		Frames       []string `xml:"frame"`
		RequestLocks []string `xml:"lock-request object,attr"`
		//Lock objects this thread owns
		OwnedLocks []string `xml:"lock-owned object,attr"`
		//This thread's state: NEW, RUNNING, BLOCKED, UNBLOCKED, WAITING, TIMEOUT_WAITING,
		//NOTIFIED, INTERRUPTED, TIMEDOUT, TERMINATED, SLEEPING
		Status string `xml:"status,attr"`
		Id     int    `xml:"id,attr"`
		Name   string `xml:"name,attr"`
	}

	//Transition is used to store an execution path.
	//See gov.nasa.jpf.vm.Transition
	Transition struct {
		Id       int              `xml:"id,attr"`
		ThreadId int              `xml:"thread,attr"`
		CG       *ChoiceGenerator `xml:"cg"`
		Insns    []*Instruction   `xml:"insn"`
	}

	//ChoiceGenerator is what is used to explore the state space.
	//Here we can see what choice was made to reach a certain state.
	//See gov.nasa.jpf.vm.ChoiceGenerator
	ChoiceGenerator struct {
		Class  string `xml:"class,attr"`
		Choice string `xml:"choice,attr"`
	}

	//Instruction corresponds to an executed JPF bytecode instruction.
	//See gov.nasa.jpf.vm.Step and gov.nasa.jpf.vm.Instruction
	Instruction struct {
		Source string `xml:"src,attr"`
		Value  string `xml:",innerxml"`
	}

	//Findings represents the error(s) found by JPF.
	//If none were found its description is "none", otherwise it is "errors".
	//Errors will mostly only contain a single error if any, since the default
	//configuration is to not detect multiple errors.
	Findings struct {
		Description string   `xml:"findings,attr"`
		Errors      []*Error `xml:"error"`
	}

	//Error represents a JPF Error.
	//It contains the property which was violated as well as a more
	//detailed error message.
	//See gov.nasa.jpf.Error
	Error struct {
		Id       int    `xml:"id,attr"`
		Property string `xml:"property"`
		Details  string `xml:"details"`
	}

	//Statistics is a simple structure which holds captured information
	//relating to JPF's execution.
	//See gov.nasa.jpf.report.Statistics
	Statistics struct {
		Time              int64 `xml:"elapsed-time"`
		NewStates         int   `xml:"new-states"`
		VisitedStates     int   `xml:"visited-states"`
		BacktrackedStates int   `xml:"backtracked-states"`
		EndStates         int   `xml:"end-states"`
		Memory            int   `xml:"max-memory"`
	}
)

func init() {
	//Register with gob so that we can store it in GridFS
	gob.Register(new(Report))
}

//NewReport
func NewReport(id bson.ObjectId, data []byte) (res *Report, err error) {
	if err = xml.Unmarshal(data, &res); err != nil {
		err = tool.NewXMLError(err, "jpf/jpfResult.go")
		return
	}
	res.Id = id
	return
}

//Errors
func (this *Report) Errors() int {
	if this.Success() {
		return 0
	}
	return len(this.Findings.Errors)
}

//Success
func (this *Report) Success() bool {
	return this.Findings.Description == "none"
}

//String
func (this *Report) String() string {
	return fmt.Sprintf("Id: %q; Version: %s; \nResult: %s;\n Stats: %s",
		this.Id, this.Version, this.Findings, this.Stats)
}

//String
func (this *Transition) String() string {
	return `Transition Id: ` + strconv.Itoa(this.Id) + `; Thread Id: ` + strconv.Itoa(this.ThreadId)
}

//String
func (this *Findings) String() string {
	return fmt.Sprintf("Findings: %s", this.Description)
}

//String
func (this *Statistics) String() string {
	return fmt.Sprintf("NewStates: %d; VisitedStates: %d; BacktrackedStates: %d; EndStates: %d;",
		this.NewStates, this.VisitedStates, this.BacktrackedStates, this.EndStates)
}
