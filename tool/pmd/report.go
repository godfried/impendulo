//Copyright (c) 2013, The Impendulo Authors
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification,
//are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice, this
//  list of conditions and the following disclaimer in the documentation and/or
//  other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
//ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package pmd

import (
	"encoding/gob"
	"encoding/xml"
	"fmt"
	"github.com/godfried/impendulo/tool"
	"html/template"
	"labix.org/v2/mgo/bson"
	"sort"
	"strings"
)

type (
	//Report is the result of running PMD on a Java source file.
	Report struct {
		Id      bson.ObjectId
		Version string  `xml:"version,attr"`
		Files   []*File `xml:"file"`
		Errors  int
	}

	//File defines a source file analysed by PMD and all of the errors
	//found in it.
	File struct {
		Name       string     `xml:"name,attr"`
		Violations Violations `xml:"violation"`
	}

	//Violations
	Violations []*Violation

	//Violation describes an error detected by PMD.
	Violation struct {
		Begin       int          `xml:"beginline,attr"`
		End         int          `xml:"endline,attr"`
		Rule        string       `xml:"rule,attr"`
		RuleSet     string       `xml:"ruleset,attr"`
		Url         template.URL `xml:"externalInfoUrl,attr"`
		Priority    int          `xml:"priority,attr"`
		Description string       `xml:",innerxml"`
		//The locations where the error was detected.
		Starts, Ends []int
	}
)

func init() {
	gob.Register(new(Report))
}

//NewReport generates a new Report from XML generated by PMD.
func NewReport(id bson.ObjectId, data []byte) (res *Report, err error) {
	if err = xml.Unmarshal(data, &res); err != nil {
		err = tool.NewXMLError(err, "pmd/pmdResult.go")
		return
	}
	res.Id = id
	res.Errors = 0
	for _, f := range res.Files {
		res.Errors += len(f.Violations)
		f.CompressViolations()
	}
	return
}

//Success is true if no errors were found.
func (this *Report) Success() bool {
	return this.Errors == 0
}

//String
func (this *Report) String() (ret string) {
	ret = fmt.Sprintf("Report{ Errors: %d\n.", this.Errors)
	if this.Files != nil {
		ret += "Files: \n"
		for _, f := range this.Files {
			ret += f.String()
		}
	}
	ret += "}\n"
	return
}

//File retrieves a File whose name ends with the provided name.
func (this *Report) File(name string) *File {
	for _, f := range this.Files {
		if strings.HasSuffix(f.Name, name) {
			return f
		}
	}
	return nil
}

//CompressViolations packs all Violations of the same
//type into a single Violation by storing their location seperately.
func (this *File) CompressViolations() {
	indices := make(map[string]int)
	compressed := make(Violations, 0, len(this.Violations))
	for _, v := range this.Violations {
		index, ok := indices[v.Rule]
		if !ok {
			//Only store if the Violation type has not been stored yet.
			v.Starts = make([]int, 0, len(this.Violations))
			v.Ends = make([]int, 0, len(this.Violations))
			compressed = append(compressed, v)
			index = len(compressed) - 1
			indices[v.Rule] = index
		}
		//Add Violation location.
		compressed[index].Starts = append(compressed[index].Starts, v.Begin)
		compressed[index].Ends = append(compressed[index].Ends, v.End)
	}
	sort.Sort(compressed)
	this.Violations = compressed
}

//String
func (this *File) String() (ret string) {
	ret = fmt.Sprintf("File{ Name: %s\n.", this.Name)
	ret += "}\n"
	return
}

func (this Violations) Len() int {
	return len(this)
}

func (this Violations) Swap(i, j int) {
	this[i], this[j] = this[j], this[i]
}

func (this Violations) Less(i, j int) bool {
	return this[i].Rule < this[j].Rule
}
