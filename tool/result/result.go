//Copyright (c) 2013, The Impendulo Authors
//All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification,
//are permitted provided that the following conditions are met:
//
//  Redistributions of source code must retain the above copyright notice, this
//  list of conditions and the following disclaimer.
//
//  Redistributions in binary form must reproduce the above copyright notice, this
//  list of conditions and the following disclaimer in the documentation and/or
//  other materials provided with the distribution.
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
//ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
//LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
//ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
//SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

package result

import (
	"fmt"

	"labix.org/v2/mgo/bson"

	"strings"
)

type (
	ChartVal struct {
		Name   string
		X      int64
		Y      float64
		FileId bson.ObjectId
	}

	//Charter is used to display result data in a chart.
	Charter interface {
		ChartVals() []*ChartVal
		GetName() string
	}

	//Tooler is used to store tool result data.
	Tooler interface {
		GetType() string
		//Retrieves the result's db id.
		GetId() bson.ObjectId
		//Retrieves the file associated with the result's db id.
		GetFileId() bson.ObjectId
		GetTestId() bson.ObjectId
		//Retrieves this result's tool name.
		GetName() string
		//True if this result is partially stored on GridFS, false otherwise.
		OnGridFS() bool
		//Retrieves the report generated by the associated tool stored in this result.
		Reporter() Reporter
		//Sets this result's tool report. Used mainly to move data from/to GridFS
		SetReport(Reporter)
	}

	//Displayer is used to display result reports.
	Displayer interface {
		GetType() string
		//GetName
		GetName() string
		//Reporter
		Reporter() Reporter
		//Template retrieves the name of a html template.
		//Each Displayer should therefore have a html file which specify how
		//its result is displayed. The return value of the Displayer's
		//Reporter method is passed to the template.
		//Here is an example for Javac:
		//
		//{{define "result"}}
		//{{if .Success}}
		//<h4 class="text-success">{{.Header}}</h4>
		//{{else}}
		//{{$content := setBreaks .Result}}
		//{{if .Warnings}}
		//<h4 class="text-warning">{{.Header}}</h4>
		//<p class="text-warning">{{$content}}</p>
		//{{else}}
		//<h4 class="text-danger">{{.Header}}</h4>
		//<p class="text-danger">{{$content}}</p>
		//{{end}}
		//{{end}}
		//{{end}}
		Template() string
	}

	Coder interface {
		GetName() string
		Lines() []*Line
	}
	Line struct {
		Title       string
		Description string
		Start       int
		End         int
	}

	//Reporter is an interface which represents a tool report on a snapshot.
	Reporter interface{}

	//Error is a Displayer used to indicate that an error
	//occured when retrieving a Tool's result or running a Tool..
	Error struct {
		err  error
		name string
	}

	//Code is a Displayer used to display a source file's code.
	Code struct {
		FileId bson.ObjectId
		Lang   string
		Data   string
	}

	//CompileType tells us what type of result compilation gave us.
	CompileType uint
)

const (
	//Some result names.
	NORESULT = "NoResult"
	TIMEOUT  = "Timeout"
	ERROR    = "Error"
	CODE     = "Code"
	//The different types of compilation that we can have.
	SUCCESS CompileType = iota
	WARNINGS
	ERRORS
	UNKNOWN
)

var (
	COMPILE_SUCCESS = []byte("Compiled successfully")
)

func HasChart(cs ...interface{}) bool {
	for _, c := range cs {
		if _, ok := c.(Charter); ok {
			return true
		}
	}
	return false
}

//NewError creates an Error. There are 3 types:
//Timeout, No result and error.
func NewError(tipe, name string) *Error {
	var e error
	switch tipe {
	case TIMEOUT:
		e = fmt.Errorf("A timeout occured during execution of %s.", name)
	case NORESULT:
		e = fmt.Errorf("No result available for %s.", name)
	default:
		tipe = ERROR
		e = fmt.Errorf("%s: could not retrieve result for %s.", tipe, name)
	}
	return &Error{
		err:  e,
		name: tipe,
	}
}

//GetName
func (e *Error) GetName() string {
	return e.name
}

func (e *Error) GetType() string {
	return ERROR
}

//Reporter
func (e *Error) Reporter() Reporter {
	return e.err.Error()
}

//Template
func (e *Error) Template() string {
	return "emptyresult"
}

//NewCode
func NewCode(fid bson.ObjectId, lang string, data []byte) *Code {
	return &Code{
		FileId: fid,
		Lang:   strings.ToLower(lang),
		Data:   strings.TrimSpace(string(data)),
	}
}

func (c *Code) GetType() string {
	return CODE
}

//GetName
func (c *Code) GetName() string {
	return c.GetType()
}

//Reporter
func (c *Code) Reporter() Reporter {
	return c
}

func (c *Code) Template() string {
	return "coderesult"
}
