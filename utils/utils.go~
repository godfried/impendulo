package utils

import (
	"archive/zip"
	"bytes"
	"errors"
	"fmt"
	"intlola/client"
	"io/ioutil"
	"os"
)

const SEP = string(os.PathSeparator)

func WriteFile(file string, data *bytes.Buffer) error {
	Log("Writing to: ", file)
	err := ioutil.WriteFile(file, data.Bytes(), 0666)
	return err
}

func Log(v ...interface{}) {
	fmt.Println(v...)
}

func CreateDirs(dirs ...string) (err error) {
	for _, dir := range dirs {
		err = os.Mkdir(dir, 0777)
		if err != nil {
			break
		}
	}
	return err
}

func CreateUserProject(c *client.Client) error {
	return CreateDirs(c.Project, c.Project+SEP+c.Name)
}

func ZipDir(dir, fname string) (err error) {
	buf := new(bytes.Buffer)
	w := zip.NewWriter(buf)
	finfos, err := ioutil.ReadDir(dir)
	if err == nil {
		for _, file := range finfos {
			if !file.IsDir() {
				f, err := w.Create(file.Name())
				if err != nil {
					break
				}
				contents, err := ioutil.ReadFile(dir + SEP + file.Name())
				if err != nil {
					break
				}
				_, err = f.Write(contents)
				if err != nil {
					break
				}
			}
		}

	}
	w.Close()
	if err == nil {
		err = WriteFile(dir+SEP+fname, buf)
	}
	return err
}

func JSONValue(jobj map[string]interface{}, key string) (string, error) {
	ival, err := jobj[key]
	if !err {
		return "", errors.New(key + " not found in JSON Object")
	}
	switch val := ival.(type) {
	case string:
		return val, nil
	}
	return "", errors.New("Invalid type in JSON parameter")
}
